{"meta":{"title":"春风十里鸭的技术小屋","subtitle":null,"description":"欢迎来到春风十里鸭的技术小屋","author":"Ding wei","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2022-06-10T08:58:50.000Z","updated":"2022-06-10T08:59:26.377Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-06-10T09:00:05.000Z","updated":"2022-06-10T09:00:38.497Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-06-10T08:57:27.000Z","updated":"2022-06-10T08:58:04.382Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C++小结","slug":"C-小结","date":"2022-06-14T07:16:23.000Z","updated":"2022-06-14T07:17:06.614Z","comments":true,"path":"2022/06/14/C-小结/","link":"","permalink":"http://example.com/2022/06/14/C-%E5%B0%8F%E7%BB%93/","excerpt":"","text":"C++相较于c异同,优势,注意点 c语法可以在c++中用，输入scanf和输出print效率比cin和cout快，算法题中时间超过的可以试试他们，做简单题时，cin和cout更方便 c++的STL标准模板库，很多leedcode题用得到。c++标配：using namespace std;以及return 0; scanf和printf在stdio.h里，cin和cout在iostream里 cin&gt;&gt;n是传值进n，所以是&gt;&gt;。cout同理 endl转行等同于’\\n’ c++使用c头文件格式：#include &lt;cmath&gt;(相当于c去掉.h) bool值为true和false，也可判断数字，非0则true const定义常量，也定义数据类型 相较于c用char[]处理字符串，c++使用string（和java一样,但s不用大写），注意string只能用cin和cout cin读字符串以空格为分隔符，读整行字符串（带空格）可用getline，用法getline(cin,s) substr截取子串，用法string s1 = s.substr(a,b) //从下标a开始，b个字符，无b表示到最后一个 c++定义struct后，使用不要再写struct（类比class类） c++定义数组vector（动态数组）(c用int arr[],不能随意改变长度)，头文件#include &lt;vector&gt; 可以直接分配大小，也可以resize定义，不需要初始化默认为0 用法vector&lt;int&gt; v1(a,b)//a是数组大小，b是给每个元素复制 末尾加元素v1.push_back(i) 迭代器遍历访问(vector,set,都一样)，v1.begin()指向第一个元素的指针，v1.end()指向最后一个元素的后一个位置。 使用：for(auto it = v1.begin();it != v1.end;it++)访问用cout&lt;&lt;*it #include &lt;cctype&gt; 判断字母isalpha(c) (包括⼤写、⼩写) ⼩写字⺟islower(c) 大写字⺟isupper(c) 字⺟⼤写⼩写+数字isalnum(c) (space和 \\t) isblank (c) （ space 、 \\t 、 \\r 、 \\n ）isspace(c) 大写转小写tolower(c) 小写转大写toupper(c) c++细节 c++容器：vector,stack,queue,map,set.均可用.size获取大小，.length也可以写成.size 集合set中元素不同，set会按从小到大排（调用#include &lt;set&gt;） 用法：set&lt;int&gt; s 插入s.insert(1) 输出第一个*(s.begin()) ​ 查找is.find(i) != s.end() 删除is.erase(i) ​ unordered_set会省去set中按大小排序，刷题超时可以考虑（调用#include &lt;unordered_set&gt;） ​ 其他用法和set相同 映射map是键值对，按键从小到大排序（调用#include &lt;map&gt;） 用法map&lt;string,int&gt; m //string为键，int为值 赋值m[&quot;hello&quot;] = 2 //key为hello，value为2 访问valuem[&quot;hello&quot;] 迭代器输出键it-&gt;first 输出值it-&gt;second 最后一个元素m.rbegin() unordered_map会省去map中按键值排序，刷题超时可以考虑（调用#include &lt;unordered_map&gt;） 其他用法和map相同 栈同ds（调用#include &lt;stack&gt;） 定义 stack&lt;int&gt; s 进栈s.push() 访问栈顶元素s.top（） 移除栈顶元素s.pop() 队列同ds（调用#include &lt;queue&gt;） 定义 queue&lt;int&gt; q 进队列q.push() 访问队首元素q.front（） 访问队首元素q.back（） 移除队首元素q.pop() 位运算bitset（调用#include &lt;&lt;bitset&gt;） sort（调用#include &lt;algorithm&gt;） 使用sort(v.begin(), v.end()) //默认从小到大 可使用cmp设置排序规则sort(v.begin(), v.end()，cmp) bool cmp(int a, int b) &#123;return a &gt; b;&#125; //从大到小 注：只能是&gt;或者&lt; cmp可以使用结构体指定排序规则 c++11实用技巧 auto x 自动推断变量类型 set&lt;int&gt;::iterator it（迭代器声明可以用auto it） for循环（遍历整个数组方便） 修改数组元素值需要&amp;i for (int i : arr) cout &lt;&lt; i &lt;&lt; endl; //遍历整个数组，并输出每个元素 ​ to_string （调用 #include &lt;string&gt;） 数字转字符串 ​ stoi 将字符串转化为int ​ stod 将字符串转化为double reverse翻转（random_shuffle随机打乱，用法和reverse一样） 用法：翻转vectorreverse(a.begin(), a.end()); 翻转数组reverse(a + 1, a + 1 + n); unique去重 ​ 用法：去重vectorunique(a.begin(), a.end()) – a.begin(); 去重数组unique(a + 1, a + 1 + n) – (a + 1); lower_bound/upper_bound 二分查找 ​ 用法：int I = lower_bound(a + 1, a + 1 + n,. x) – a; ​ 找有序vector小于等于x最大整数（upper类似，小于等于）int y = *--upper_bound(a.begin(), a.end(), x);","categories":[],"tags":[]},{"title":"python实现自动化处理txt文件（提取最后一行数据以及将txt转成excel）","slug":"保姆级教程python实现自动化处理txt文件（提取最后一行数据以及将txt转成excel）-1","date":"2022-06-10T10:35:04.000Z","updated":"2022-06-10T10:39:06.040Z","comments":true,"path":"2022/06/10/保姆级教程python实现自动化处理txt文件（提取最后一行数据以及将txt转成excel）-1/","link":"","permalink":"http://example.com/2022/06/10/%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8Bpython%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86txt%E6%96%87%E4%BB%B6%EF%BC%88%E6%8F%90%E5%8F%96%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BB%A5%E5%8F%8A%E5%B0%86txt%E8%BD%AC%E6%88%90excel%EF%BC%89-1/","excerpt":"","text":"由于老师需要处理大量数据，所以想着用python写一个自动化处理的数据的代码，经过一会儿尝试，实现了我处理数据需求。 以下是txt转成excel操作过程中可能碰到的问题。 注意空格，因为python本身没有{ }用来对齐，因此空格不要乱调，不然影响语句逻辑关系 处理数据时，修改dir那里的地址，改成你要处理的文件夹地址，这里注意语言本身可能不识别转义字符 然后就是list.replace(‘.txt’,’.xlsx’)，这里是将文件转名字用的，所以要看好需要处理文件的格式，填错了将无法识别文件 其他的就是注意符号的中英文 配置好python环境后，下载包 xlsxwriter，否则会报错，以后调其他的py包也一样，百度一下调报的代码，cmd中输入 这里的命令是 （tips：导入包时因为有些地址是国外的，速度比较慢，可以百度看看国内的版本，如我附的这个） pip3 install xlsxwriter -i https://pypi.douban.com/simple 代码如下：（只需要改一下dir路径名就可以） import xlsxwriterimport osdir = &quot;C:/Users/10092/Desktop/1&quot; #绝对路径lists = os.listdir(dir) #获取目录下的所有文件名for list in lists: #遍历文件名 txt_dir = os.path.join(dir,list) #每个txt文件的路径 f = open(txt_dir,&#x27;r&#x27;) contexts = f.readlines() # 获取txt文件内容 sheet_name = list.replace(&#x27;.log&#x27;,&#x27;.xlsx&#x27;) #excel文件取名 file = xlsxwriter.Workbook(sheet_name) #创建excl sheet = file.add_worksheet() #创建工作表 i = 0 #excel表格中的第一行 for context in contexts: context = context.strip(&#x27;\\n&#x27;) context = context.split(&#x27;,&#x27;) #通过指定分隔符(,)对字符串进行切片 sheet.write_column(i, 0, context) #第i行，第0列（在工作表中写入文本内容） i += 1 file.close() 实现提取text最后一行数据的代码：（注意点在代码下面） import os path = &#x27;C:/Users/10092/Desktop/4&#x27;#绝对路径path_list = os.listdir(path)#这里选择处理包的路径path_list.sort(key=lambda x:int(x[14:-4]))# 检查获得的文件名是否按顺序排列：print(path_list)f = open(&quot;result.txt&quot;, &quot;w&quot;)#逐个打开文件for filename in path_list: fe = open(os.path.join(path,filename),&#x27;r&#x27;) lines = fe.readlines() last_line=lines[-1] f.write(last_line) #print(last_line) #创建一个名为“ result.txt”的文件： 使用说明：（1）上面执行后，得到的是txt文件，再用一下之前转excel代码（将result.txt文件放到一个包，然后注意改一下路径，改成你放的包的路径）这里得到的是倒序的（跟包里文件相反）（2）自己在excel第一列插入一列新的列，标上1,2,3…，然后ctrl+A全选，选择排序，自定义排序，按A倒序（3）然后选择B列，点击数据，选择分列，选分隔符号，下一步，选空格，完成（4）然后将数据放到你的表格中","categories":[],"tags":[]}],"categories":[],"tags":[]}