<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奶绿去冰加奶盖</title>
  <icon>https://www.gravatar.com/avatar/786fb7278c2edcc5decc266933c9db8c</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-14T07:17:06.614Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ding wei</name>
    <email>1009245075@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++小结</title>
    <link href="http://example.com/2022/06/14/C-%E5%B0%8F%E7%BB%93/"/>
    <id>http://example.com/2022/06/14/C-%E5%B0%8F%E7%BB%93/</id>
    <published>2022-06-14T07:16:23.000Z</published>
    <updated>2022-06-14T07:17:06.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-相较于c异同-优势-注意点"><a href="#C-相较于c异同-优势-注意点" class="headerlink" title="C++相较于c异同,优势,注意点"></a>C++相较于c异同,优势,注意点</h2><ul><li><p>c语法可以在c++中用，输入scanf和输出print效率比cin和cout快，算法题中时间超过的可以试试他们，做简单题时，cin和cout更方便</p></li><li><p>c++的STL标准模板库，很多leedcode题用得到。c++标配：<code>using namespace std;</code>以及<code>return 0;</code></p></li><li><p>scanf和printf在stdio.h里，cin和cout在iostream里</p></li><li><p>cin&gt;&gt;n是传值进n，所以是&gt;&gt;。cout同理</p></li><li><p>endl转行等同于’\n’</p></li><li><p>c++使用c头文件格式：<code>#include &lt;cmath&gt;</code>(相当于c去掉.h)</p></li><li><p>bool值为true和false，也可判断数字，非0则true</p></li><li><p>const定义常量，也定义数据类型</p></li><li><p>相较于c用char[]处理字符串，c++使用string（和java一样,但s不用大写），<strong>注意string只能用cin和cout</strong></p><p>cin读字符串以空格为分隔符，读整行字符串（带空格）可用<strong>getline</strong>，用法<code>getline(cin,s)</code></p><p>substr截取子串，用法<code>string s1 =  s.substr(a,b) //从下标a开始，b个字符，无b表示到最后一个</code></p></li><li><p>c++定义struct后，使用不要再写struct（类比class类）</p></li><li><p>c++定义数组vector（动态数组）(c用<code>int arr[]</code>,不能随意改变长度)，头文件<code>#include &lt;vector&gt;</code></p><p>可以直接分配大小，也可以resize定义，不需要初始化默认为0</p><ol><li><p>用法<code>vector&lt;int&gt; v1(a,b)//a是数组大小，b是给每个元素复制</code>        末尾加元素<code>v1.push_back(i)</code></p></li><li><p>迭代器遍历访问(vector,set,都一样)，v1.begin()指向第一个元素的指针，v1.end()指向最后一个元素的后一个位置。</p><p>使用：<code>for(auto it = v1.begin();it != v1.end;it++)</code>访问用<code>cout&lt;&lt;*it</code></p></li></ol></li><li><p><code>#include &lt;cctype&gt; </code></p><p>判断字母isalpha(c)      (包括⼤写、⼩写)              ⼩写字⺟islower(c)               大写字⺟isupper(c)</p><p>字⺟⼤写⼩写+数字isalnum(c)        (space和 \t) isblank (c)        （ space 、 \t 、 \r 、 \n ）isspace(c)</p><p>大写转小写tolower(c)         小写转大写toupper(c)</p></li></ul><h2 id="c-细节"><a href="#c-细节" class="headerlink" title="c++细节"></a>c++细节</h2><ul><li><p>c++容器：vector,stack,queue,map,set.均可用.size获取大小，.length也可以写成.size</p></li><li><p>集合set中元素不同，set会按从小到大排（调用<code>#include &lt;set&gt;</code>）</p><ul><li>用法：<code>set&lt;int&gt; s</code>        插入<code>s.insert(1)</code>       输出第一个<code>*(s.begin())</code></li></ul><p>​       查找i<code>s.find(i) != s.end()</code>    删除i<code>s.erase(i)</code></p><p>​       unordered_set会省去set中按大小排序，刷题超时可以考虑（调用<code>#include &lt;unordered_set&gt;</code>）</p><p>​       其他用法和set相同</p></li><li><p>映射map是键值对，按键从小到大排序（调用<code>#include &lt;map&gt;</code>）</p><ul><li><p>用法<code>map&lt;string,int&gt; m //string为键，int为值</code>      赋值<code>m[&quot;hello&quot;] = 2 //key为hello，value为2</code></p><p>访问value<code>m[&quot;hello&quot;]</code>      </p><p>迭代器输出键<code>it-&gt;first</code>    输出值<code>it-&gt;second</code>    最后一个元素<code>m.rbegin()</code></p><p>unordered_map会省去map中按键值排序，刷题超时可以考虑（调用<code>#include &lt;unordered_map&gt;</code>）</p><p>其他用法和map相同</p></li></ul></li><li><p>栈同ds（调用<code>#include &lt;stack&gt;</code>）</p><p>定义 <code>stack&lt;int&gt; s</code>     进栈<code>s.push()</code>    访问栈顶元素<code>s.top（）</code>       移除栈顶元素<code>s.pop()</code></p></li><li><p>队列同ds（调用<code>#include &lt;queue&gt;</code>）</p><p>定义 <code>queue&lt;int&gt; q</code>     进队列<code>q.push()</code>    访问队首元素<code>q.front（）</code>       访问队首元素<code>q.back（）</code></p><p>移除队首元素<code>q.pop()</code></p></li><li><blockquote><p>位运算bitset（调用<code>#include &lt;&lt;bitset&gt;</code>）</p></blockquote></li><li><p>sort（调用<code>#include &lt;algorithm&gt;</code>）</p><p>使用<code>sort(v.begin(), v.end()) //默认从小到大</code>        </p><p>可使用cmp设置排序规则<code>sort(v.begin(), v.end()，cmp) </code>  </p><p><code>bool cmp(int a, int b) &#123;return a &gt; b;&#125;  //从大到小</code>   注：只能是&gt;或者&lt;</p><p>cmp可以使用结构体指定排序规则</p></li><li><p>c++11实用技巧</p><p>auto x 自动推断变量类型               <code>set&lt;int&gt;::iterator it</code>（迭代器声明可以用auto it）</p><p>for循环（遍历整个数组方便）   修改数组元素值需要&amp;i</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : arr)</span><br><span class="line"> cout &lt;&lt; i &lt;&lt; endl; <span class="comment">//遍历整个数组，并输出每个元素</span></span><br></pre></td></tr></table></figure></li></ul><p>​       to_string （调用<code> #include &lt;string&gt;</code>）   数字转字符串</p><p>​       stoi        将字符串转化为int</p><p>​       stod      将字符串转化为double</p><ul><li><p>reverse翻转（random_shuffle随机打乱，用法和reverse一样）</p><p>用法：翻转vector<code>reverse(a.begin(), a.end());</code>              翻转数组<code>reverse(a + 1, a + 1 + n);</code></p></li><li><p>unique去重</p></li></ul><p>​       用法：去重vector<code>unique(a.begin(), a.end()) – a.begin();</code>              去重数组<code>unique(a + 1, a + 1 + n) – (a + 1);</code></p><ul><li>lower_bound/upper_bound 二分查找</li></ul><p>​       用法：<code>int I = lower_bound(a + 1, a + 1 + n,. x) – a; </code> </p><p>​          找有序vector小于等于x最大整数（upper类似，小于等于）<code>int y = *--upper_bound(a.begin(), a.end(), x);</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-相较于c异同-优势-注意点&quot;&gt;&lt;a href=&quot;#C-相较于c异同-优势-注意点&quot; class=&quot;headerlink&quot; title=&quot;C++相较于c异同,优势,注意点&quot;&gt;&lt;/a&gt;C++相较于c异同,优势,注意点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;c语法可以在c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python实现自动化处理txt文件（提取最后一行数据以及将txt转成excel）</title>
    <link href="http://example.com/2022/06/10/%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8Bpython%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86txt%E6%96%87%E4%BB%B6%EF%BC%88%E6%8F%90%E5%8F%96%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BB%A5%E5%8F%8A%E5%B0%86txt%E8%BD%AC%E6%88%90excel%EF%BC%89-1/"/>
    <id>http://example.com/2022/06/10/%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8Bpython%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86txt%E6%96%87%E4%BB%B6%EF%BC%88%E6%8F%90%E5%8F%96%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BB%A5%E5%8F%8A%E5%B0%86txt%E8%BD%AC%E6%88%90excel%EF%BC%89-1/</id>
    <published>2022-06-10T10:35:04.000Z</published>
    <updated>2022-06-10T10:39:06.040Z</updated>
    
    <content type="html"><![CDATA[<p>﻿  由于老师需要处理大量数据，所以想着用python写一个自动化处理的数据的代码，经过一会儿尝试，实现了我处理数据需求。<br>  以下是txt转成excel操作过程中可能碰到的问题。</p><ol><li><p>注意空格，因为python本身没有{ }用来对齐，因此空格不要乱调，不然影响语句逻辑关系</p></li><li><p>处理数据时，<strong>修改dir那里的地址</strong>，改成你要处理的文件夹地址，这里注意语言本身可能不识别转义字符</p></li><li><p>然后就是list.replace(‘.txt’,’.xlsx’)，这里是将文件转名字用的，所以要看好需要处理文件的格式，填错了将无法识别文件</p></li><li><p>其他的就是注意符号的中英文</p></li><li><p> 配置好python环境后，下载包 xlsxwriter，否则会报错，以后调其他的py包也一样，百度一下调报的代码，cmd中输入</p></li></ol><p>这里的命令是  （tips：导入包时因为有些地址是国外的，速度比较慢，可以百度看看国内的版本，如我附的这个）</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip3 install xlsxwriter -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p>代码如下：（只需要改一下dir路径名就可以）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&quot;C:/Users/10092/Desktop/1&quot;</span> <span class="comment">#绝对路径</span></span><br><span class="line">lists = os.listdir(<span class="built_in">dir</span>) <span class="comment">#获取目录下的所有文件名</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">in</span> lists: <span class="comment">#遍历文件名</span></span><br><span class="line">  txt_dir = os.path.join(<span class="built_in">dir</span>,<span class="built_in">list</span>) <span class="comment">#每个txt文件的路径</span></span><br><span class="line">  f = <span class="built_in">open</span>(txt_dir,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">  contexts = f.readlines() <span class="comment"># 获取txt文件内容</span></span><br><span class="line">  sheet_name = <span class="built_in">list</span>.replace(<span class="string">&#x27;.log&#x27;</span>,<span class="string">&#x27;.xlsx&#x27;</span>) <span class="comment">#excel文件取名</span></span><br><span class="line">  file = xlsxwriter.Workbook(sheet_name) <span class="comment">#创建excl</span></span><br><span class="line">  sheet = file.add_worksheet() <span class="comment">#创建工作表</span></span><br><span class="line">  i = <span class="number">0</span> <span class="comment">#excel表格中的第一行</span></span><br><span class="line">  <span class="keyword">for</span> context <span class="keyword">in</span> contexts:</span><br><span class="line">    context = context.strip(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    context = context.split(<span class="string">&#x27;,&#x27;</span>) <span class="comment">#通过指定分隔符(,)对字符串进行切片</span></span><br><span class="line">    sheet.write_column(i, <span class="number">0</span>, context) <span class="comment">#第i行，第0列（在工作表中写入文本内容）</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  file.close()</span><br></pre></td></tr></table></figure><p>实现提取text最后一行数据的代码：（注意点在代码下面）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line">path = <span class="string">&#x27;C:/Users/10092/Desktop/4&#x27;</span><span class="comment">#绝对路径</span></span><br><span class="line">path_list = os.listdir(path)<span class="comment">#这里选择处理包的路径</span></span><br><span class="line">path_list.sort(key=<span class="keyword">lambda</span> x:<span class="built_in">int</span>(x[<span class="number">14</span>:-<span class="number">4</span>]))</span><br><span class="line"><span class="comment"># 检查获得的文件名是否按顺序排列：print(path_list)</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;result.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#逐个打开文件</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> path_list:</span><br><span class="line">    fe = <span class="built_in">open</span>(os.path.join(path,filename),<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    lines = fe.readlines()</span><br><span class="line">    last_line=lines[-<span class="number">1</span>]</span><br><span class="line">    f.write(last_line)</span><br><span class="line">    <span class="comment">#print(last_line)</span></span><br><span class="line">    <span class="comment">#创建一个名为“ result.txt”的文件：</span></span><br></pre></td></tr></table></figure><p>使用说明：<br>（1）上面执行后，得到的是txt文件，再用一下之前转excel代码（将result.txt文件放到一个包，然后注意改一下路径，改成你放的包的路径）<br>这里得到的是倒序的（跟包里文件相反）<br>（2）自己在excel第一列插入一列新的列，标上1,2,3…，然后ctrl+A全选，选择排序，自定义排序，按A倒序<br>（3）然后选择B列，点击数据，选择分列，选分隔符号，下一步，选空格，完成<br>（4）然后将数据放到你的表格中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;﻿  由于老师需要处理大量数据，所以想着用python写一个自动化处理的数据的代码，经过一会儿尝试，实现了我处理数据需求。&lt;br&gt;  以下是txt转成excel操作过程中可能碰到的问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注意空格，因为python本身没有{ }用来对齐，因此</summary>
      
    
    
    
    
  </entry>
  
</feed>
